/*---------------------------------------------BIBLIOTHEQUE TP C LES MATRICES CREUSES---------------------------------------------------------------------*/
/*--------------------------------------------------------LE FICHIER .h------------------------------------------------------------------------------------*/
#ifndef BIBLIO_H_INCLUDED
#define BIBLIO_H_INCLUDED
/*---------------------------------------------------LA 1ERE REPRESENTATION-----------------------------------------------------------------------------------------*/
//----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
/*----------------------------------------------------LA MACHINE ABSTRAITE-------------------------------------------------------------------------------------*/
// DECLARATION DES TYPES
typedef int Typeelem_Li;
typedef struct Maillon_Li *Pointeur_Li;
struct Maillon_Li // on definit la strcuture du maillon
{
    Typeelem_Li ligne;
    Typeelem_Li colonne;
    Typeelem_Li val_nonul;
    Pointeur_Li Suiv;
};
// les entaites de la machine abstraite
void Allouer_Li(Pointeur_Li *P);                    // allouer un espace et retourner son adresse
void Liberer_Li(Pointeur_Li P);                     // liberer l'espace deja allouer
Pointeur_Li Suivant_Li(Pointeur_Li P);              // retourner l'adresse du prochain element contenu dans le maillon P
Typeelem_Li Valeur_ligne(Pointeur_Li P);            // retourner l'information contenue dans le maillon P
Typeelem_Li Valeur_colonne(Pointeur_Li P);          // retourner l'information contenue dans le maillon P
Typeelem_Li Valeur_val(Pointeur_Li P);              // retourner l'information contenue dans le maillon P
void Aff_val_ligne(Pointeur_Li P, Typeelem_Li i);   // affecter l'information au champ vam du maillon P
void Aff_val_colonne(Pointeur_Li P, Typeelem_Li j); // affecter l'information au champ vam du maillon P
void Aff_val(Pointeur_Li P, Typeelem_Li Val);       // affecter l'information au champ vam du maillon P
void Aff_adr_Li(Pointeur_Li P, Pointeur_Li Q);      // lier P a une autre adresse
/*----------------------------------------------------FIN DE LA MACHINE ASTRAITE-----------------------------------------------------------------------------------------*/
//----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
/*--------------------------------------------------LES MODULES DE LA 1ER REPRESENTATION----------------------------------------------------------------------------------*/
//----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
void creation_liste_rep1(Pointeur_Li *tete, int lig, int col);       // creation d'une liste a partir d'une matrice creuse
void Affichage_LLC_rep1(Pointeur_Li tete);                           // l'affichage de la liste
void Affichage_matrice_rep1(Pointeur_Li tete, int nbr_l, int nbr_c); // Affichage de la matrice creuse a partir d'une liste
//----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
/*------------------------------------------------LES DIVISIONS(EXTRACTION,DIVISION SOUS MATRICE)--------------------------------------------------------------------------*/
//----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
void extraction_rep1(Pointeur_Li tete, int dep_l, int dep_c, int fin_l, int fin_c, Pointeur_Li *teterect);
void divsousmatrice_rep1(Pointeur_Li tete, int nbr_l, int nbr_c, int divrow, int divcol);
//----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
/*---------------------------------------------------------FIN DES MODULES DIVISION---------------------------------------------------------------------------------------*/
//----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
/* -------------------------------------------------------------L'ADDITION------------------------------------------------------------------------------------------------*/
void addition_rep1(Pointeur_Li tete1, Pointeur_Li tete2, Pointeur_Li *teteop);
void addition_multiple_rep1(Pointeur_Li tete1, Pointeur_Li tete2, Pointeur_Li *teteadd, int nbr_l, int nbr_c);
//----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
/*---------------------------------------------------------FIN DES MODULES ADDITION---------------------------------------------------------------------------------------*/
//----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
void tri_bulle_lig_rep1(Pointeur_Li *tete); // le tri a bulle des ligne quand va l'utiliser dans le module multiplication et transpose
//----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
/*------------------------------------------------------------LA MULTIPLICATION-------------------------------------------------------------------------------------------*/
//----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
void multiplication_vect_rep1(Pointeur_Li tete, Pointeur_Li tetevect, Pointeur_Li *teteop, int nbr_l, int nbr_c, int nbr_lvect);
void multiplication_rep1(Pointeur_Li tete1, Pointeur_Li tete2, Pointeur_Li *tetemulti, int nbr_l1, int nbr_c1, int nbr_l2, int nbr_c2);
/*------------------------------------------------------FIN DES MODULES MULTIPLICATION------------------------------------------------------------------------------------*/
//----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
/*-------------------------------------------------------------LA TRANSPOSEE----------------------------------------------------------------------------------------------*/
//----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
void matrice_transposee_rep1(Pointeur_Li tete, Pointeur_Li *tetetr);
//----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
/*---------------------------------------------------------FIN DE LA TRANSPOSEE-------------------------------------------------------------------------------------------*/
//----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
/*--------------------------------------------------------LES OPERATIONS LOGIQUE-----------------------------------------------------------------------------------------*/
//----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
void operation_non_rep1(Pointeur_Li tete, Pointeur_Li *teteop, int nbr_l, int nbr_c);
void operation_et_rep1(Pointeur_Li tete1, Pointeur_Li tete2, Pointeur_Li *teteop);
void operation_ou_rep1(Pointeur_Li tete1, Pointeur_Li tete2, Pointeur_Li *teteop);
void operation_oux_rep1(Pointeur_Li tete1, Pointeur_Li tete2, Pointeur_Li *teteop);
//----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
/*--------------------------------------------------------FIN DES OPERATIONS LOGIQUE--------------------------------------------------------------------------------------*/
//----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
/*----------------------------------------------------------MODIFICATION PAR CHAMP------------------------------------------------------------------------------------------*/
void Recherche_rep_1(Pointeur_Li tete, int val_lig, int val_col, Pointeur_Li *p, Pointeur_Li *precedent);
void supp_rep1(Pointeur_Li *tete, int val_lig, int val_col);
void inserer_rep1(Pointeur_Li *tete, int val, int val_lig, int val_col, int position);
void modification_champ_rep1(Pointeur_Li *tete, int val, int val_lig, int val_col);
/*---------------------------------------------------FIN DES MODULES MODIFICATION PAR CHAMP-------------------------------------------------------------------------------*/
//----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
/*-----------------------------------------------------LA FIN DE LA 1ER REPRESENTATION------------------------------------------------------------------------------------*/
//----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
/*----------------------------------------------------------LA 2EM REPRESENTATION-------------------------------------------------------------------------------------------*/
//----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
/*----------------------------------------------------------LA MACHINE ABSTRAITE--------------------------------------------------------------------------------------------*/
//----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
// DECLARATION DES TYPES
typedef struct Maillon_lign *Pointeur_lign;
typedef struct Maillon_col *Pointeur_col;
struct Maillon_lign
{
    Typeelem_Li ligne;
    Pointeur_lign Suiv_lign;
    Pointeur_col Suiv_col;
};
struct Maillon_col
{
    Typeelem_Li colonne;
    Typeelem_Li val_nonul;
    Pointeur_col Suiv_col;
};
//----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
// MODULES DE LA MACHINE ABSTRAITE
void Allouer_lign(Pointeur_lign *P);                     // allouer un espace et retourner son adresse
void Allouer_col(Pointeur_col *P);                       // allouer un espace et retourner son adresse
void Liberer_lign(Pointeur_lign P);                      // libérer l'espace déja allouer
void Liberer_col(Pointeur_col P);                        // libérer l'espace déja allouer
Pointeur_lign Suivant_lign_l(Pointeur_lign P);           // retourner l'adresse du prochain élément contenu dans le maillon P
Pointeur_col Suivant_col_l(Pointeur_lign P);             // retourner l'adresse du prochain élément contenu dans le maillon P
Pointeur_col Suivant_col_c(Pointeur_col P);              // retourner l'adresse du prochain élément contenu dans le maillon P
Typeelem_Li Valeur_ligne_rep2(Pointeur_lign P);               // retourner l'information contenue dans le maillon P
Typeelem_Li Valeur_colonne_rep2(Pointeur_col P);              // retourner l'information contenue dans le maillon P
Typeelem_Li Valeur_val_rep2(Pointeur_col P);                  // retourner l'information contenue dans le maillon P
void Aff_val_ligne_rep2(Pointeur_lign P, Typeelem_Li i);      // affecter l'information au champ vam du maillon P
void Aff_val_colonne_rep2(Pointeur_col P, Typeelem_Li j);     // affecter l'information au champ vam du maillon P
void Aff_val_rep2(Pointeur_col P, Typeelem_Li Val);           // affecter l'information au champ vam du maillon P
void Aff_adr_ligne(Pointeur_lign P, Pointeur_lign Q);    // lier P à une autre adresse
void Aff_adr_ligne_col(Pointeur_lign P, Pointeur_col Q); // lier P à une autre adresse
void Aff_adr_col(Pointeur_col P, Pointeur_col Q);        // lier P à une autre adresse
//----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
/*----------------------------------------------------LA FIN DE LA MACHINE ABSTRAITE-----------------------------------------------------------------------------*/
//----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
/*------------------------------------------------LES MODULES DE LA 2EME REPRESENTATION-------------------------------------------------------------------------*/
//----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
/*-------------------------------------------------------LES MODULES CREATIONS-----------------------------------------------------------------------------------*/
//----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
void create_maillon_colonne_rep2(int val, int j, Pointeur_lign *z);
void creation_liste_ligne(Pointeur_lign *tete, int ligne); // fonction pour creer seulement la liste qui contient les nums de lignes
void create_liste_rep_2(Pointeur_lign *tete, int ligne, int colonne);
//----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
/*-------------------------------------------------------FIN DES MODULES CREATION-----------------------------------------------------------------------------------*/
//----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
/*---------------------------------------------------------LES MODULES AFFICHAGE-----------------------------------------------------------------------------------*/
//----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
void affichage_liste_rep_2(Pointeur_lign tete);
void affichage_matrice_rep2(Pointeur_lign tete, int nbr_l, int nbr_c);
//----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
/*-------------------------------------------------------FIN DES MODULES AFFICHAGE-----------------------------------------------------------------------------------*/
//----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
/*------------------------------------------------LES DIVISION(EXTRACTION,DIVISION SOUS MATRICE)-----------------------------------------------------------------*/
//----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
void extraction_rep2(Pointeur_lign tete, int dep_l, int dep_c, int fin_l, int fin_c, Pointeur_lign *teteract);
void divsousmatrice_rep2(Pointeur_lign tete, int nbr_l, int nbr_c, int divrow, int divcol);
//----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
/*---------------------------------------------------------FIN DES MODULES DIVISION------------------------------------------------------------------------------*/
//----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
/* -------------------------------------------------------------L'ADDITION---------------------------------------------------------------------------------------*/
//----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
void addligne(Pointeur_lign plig1, Pointeur_lign plig2, Pointeur_lign *teteoplig);
void addition_rep2(Pointeur_lign tete1, Pointeur_lign tete2, Pointeur_lign *teteop);
void addition_multiple_rep2(Pointeur_lign tete1, Pointeur_lign tete2, Pointeur_lign *teteadd, int nbr_l, int nbr_c);
//----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
/*---------------------------------------------------------FIN DES MODULES ADDITION------------------------------------------------------------------------------*/
//----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
/*------------------------------------------------------------LA MULTIPLICATION----------------------------------------------------------------------------------*/
//----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
void multiplication_vect_rep2(Pointeur_lign tete, Pointeur_lign tetevect, Pointeur_lign *teteop, int nbr_l, int nbr_c, int nbr_lvect, int nbr_cvect);
void multiplication_rep2(Pointeur_lign tete1, Pointeur_lign tete2, int nbr_l1, int nbr_c1, int nbr_l2, int nbr_c2);
//----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
/*------------------------------------------------------FIN DES MODULES MULTIPLICATION---------------------------------------------------------------------------*/
//----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
/*-------------------------------------------------------------LA TRANSPOSEE-------------------------------------------------------------------------------------*/
//----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
void transposee_rep2(Pointeur_lign tete, Pointeur_lign *tetetrans, int ligne, int colonne);
//----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
/*----------------------------------------------------------FIN DE LA TRANSPOSEE----------------------------------------------------------------------------------*/
//----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
/*---------------------------------------------------------LES OPERATIONS LOGIQUE--------------------------------------------------------------------------......*/
//----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
void operation_non_rep2(Pointeur_lign tete, Pointeur_lign *tete_non, int ligne, int colonne); // LE NON LOGIQUE
//----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
/*-------------------------------------------------------------LE ET LOGIQUE-------------------------------------------------------------------------------------*/
//----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
void et_ligne(Pointeur_lign plig1, Pointeur_lign plig2, Pointeur_lign *teteoplig);
void operation_et_rep2(Pointeur_lign tete1, Pointeur_lign tete2, Pointeur_lign *teteop);
//----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
/*-------------------------------------------------------------FIN ET LOGIQUE-------------------------------------------------------------------------------------*/
//----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
/*-------------------------------------------------------------LE OU LOGIQUE-------------------------------------------------------------------------------------*/
//----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
void ou_ligne(Pointeur_lign plig1, Pointeur_lign plig2, Pointeur_lign *teteoplig);
void operation_ou_rep2(Pointeur_lign tete1, Pointeur_lign tete2, Pointeur_lign *teteop);
/*--------------------------------------------.----------------FIN OU LOGIQUE-------------------------------------------------------------------------------------*/
//----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
/*----------------------------------------------------------LE OU Exlusif LOGIQUE--------------------------------------------------------------------------------*/
//----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
void oux_ligne(Pointeur_lign plig1, Pointeur_lign plig2, Pointeur_lign *teteoplig);
void operation_oux_rep2(Pointeur_lign tete1, Pointeur_lign tete2, Pointeur_lign *teteop);
//----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
/*----------------------------------------------------------FIN OU Exlusif LOGIQUE--------------------------------------------------------------------------------*/
//----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
/*--------------------------------------------------------FIN DES OPERATIONS LOGIQUE------------------------------------------------------------------------------*/
//----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
/*----------------------------------------------------------MODIFICATION PAR CHAMP--------------------------------------------------------------------------------*/
//----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
void Recherche_rep2(Pointeur_lign tete, int val_lig, int val_col, Pointeur_lign *plig, Pointeur_col *p, Pointeur_col *precedent);
void supp_rep2(Pointeur_lign tete, int val_lig, int val_col);
void inserer_rep2(Pointeur_lign tete, int val, int val_lig, int val_col);
void modification_champ_rep2(Pointeur_lign *tete, int val, int val_lig, int val_col);
/*-----------------------------------------------------FIN DES MODULES MODIFICATION PAR CHAMP----------------------------------------------------------------------*/
/*--------------------------------------------------------LA FIN DE LA 2ER REPRESENTATION--------------------------------------------------------------------------*/
/*---------------------------------------------------------------------FIN-----------------------------------------------------------------------------------------*/
#endif
